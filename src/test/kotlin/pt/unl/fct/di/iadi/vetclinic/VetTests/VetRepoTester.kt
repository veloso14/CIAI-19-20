package pt.unl.fct.di.iadi.vetclinic.VetTests

import org.hamcrest.CoreMatchers.equalTo
import org.hamcrest.CoreMatchers.not
import org.junit.Assert.assertThat
import org.junit.Test
import org.junit.runner.RunWith
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.boot.test.context.SpringBootTest
import org.springframework.test.context.junit4.SpringRunner
import pt.unl.fct.di.iadi.vetclinic.model.*
import javax.transaction.Transactional

@RunWith(SpringRunner::class)
@SpringBootTest
class VetRepoTester {

    @Autowired
    lateinit var vets:VetRepository


    companion object Constants {
        val cuvillo = VetDAO(-1,"dssd","dssd","dssd","dssd",355, "dssd","",10,false, emptyList(), mutableListOf())
        val victorino = VetDAO(-1,"dssd","dssd","victo","dssd",355, "dssd","",102,true, emptyList(), mutableListOf())

    }


    @Test
    fun `basic test on findAll`() {
        vets.deleteAll()
        assertThat(vets.findAll().toList(), equalTo(emptyList()))
    }


    @Transactional
    @Test
    fun ` test on findAll without frozen vets`() {

        vets.deleteAll()
        val vet0 = vets.save(cuvillo)
        assertThat(vet0.id, not(equalTo(cuvillo.id)))//the id is different because it is generated by Spring
        assertThat(vet0.name, equalTo(cuvillo.name))
        assertThat(vet0.frozen, equalTo(cuvillo.frozen))

        assertThat(vets.findAllByFrozenFalse().toList(), equalTo(listOf(vet0)))

        val vet1 = vets.save(victorino)
        assertThat(vet1.id, not(equalTo(victorino.id)))//the id is different because it is generated by Spring
        assertThat(vet1.name, equalTo(victorino.name))
        assertThat(vet1.frozen, equalTo(victorino.frozen))

        assertThat(vets.findAllByFrozenFalse().toList(), equalTo(listOf(vet0)))

        vets.delete(vet0)

        assertThat(vets.findAllByFrozenFalse().toList(), equalTo(emptyList()))



    }

}