package pt.unl.fct.di.iadi.vetclinic.ClienTests


import org.hamcrest.CoreMatchers.equalTo
import org.hamcrest.CoreMatchers.not
import org.junit.Assert.assertThat
import org.junit.Test
import org.junit.runner.RunWith
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.boot.test.context.SpringBootTest
import org.springframework.test.context.junit4.SpringRunner
import pt.unl.fct.di.iadi.vetclinic.model.ClientDAO
import pt.unl.fct.di.iadi.vetclinic.model.ClientRepository
import pt.unl.fct.di.iadi.vetclinic.model.PetDAO
import pt.unl.fct.di.iadi.vetclinic.model.PetRepository

@RunWith(SpringRunner::class)
@SpringBootTest
class ClientRepoTester {

    @Autowired
    lateinit var clients: ClientRepository

    companion object Constants {
        val antonio = ClientDAO(-1L,"Antonio","antonio@gmail.com","tony","1234",1234, "Rua Romao", emptyList(), emptyList())
        val chenel = ClientDAO(-1L,"Chenel","chenel@gmail.com","chenel","1234",1234, "Rua Romao", emptyList(), emptyList())

    }

    // IMPORTANT: the database is not cleaned between tests, it means that it will keep the pets
    // saved in previous tests

    @Test
    fun `basic test on findAll`() {
        assertThat(clients.findAll().toList(), equalTo(emptyList()))
    }

    @Test
    fun `basic test on save and delete`() {
        val client = clients.save(antonio)
        assertThat(client.id, not(equalTo(antonio.id)))//the id is different because it is generated by Spring
        assertThat(client.name, equalTo(antonio.name))
        assertThat(client.email, equalTo(antonio.email))
        assertThat(client.username, equalTo(antonio.username))
        assertThat(client.password, equalTo(antonio.password))
        assertThat(client.cellphone, equalTo(antonio.cellphone))
        assertThat(client.address, equalTo(antonio.address))

        assertThat(clients.findAll().toList(), equalTo(listOf<ClientDAO>(client)))

        clients.delete(client);

        assertThat(clients.findAll().toList(), equalTo(emptyList()))
    }

    @Test
    fun `another test on save and delete`() {
        val client0 = clients.save(antonio)
        assertThat(client0.id, not(equalTo(antonio.id)))//the id is different because it is generated by Spring
        assertThat(client0.name, equalTo(antonio.name))
        assertThat(client0.email, equalTo(antonio.email))
        assertThat(client0.username, equalTo(antonio.username))
        assertThat(client0.password, equalTo(antonio.password))
        assertThat(client0.cellphone, equalTo(antonio.cellphone))
        assertThat(client0.address, equalTo(antonio.address))

        assertThat(clients.findAll().toList(), equalTo(listOf(client0)))

        val client1 = clients.save(chenel)
        assertThat(client1.id, not(equalTo(chenel.id)))//the id is different because it is generated by Spring
        assertThat(client1.name, equalTo(chenel.name))
        assertThat(client1.email, equalTo(chenel.email))
        assertThat(client1.username, equalTo(chenel.username))
        assertThat(client1.password, equalTo(chenel.password))
        assertThat(client1.cellphone, equalTo(chenel.cellphone))
        assertThat(client1.address, equalTo(chenel.address))

        assertThat(clients.findAll().toList(), equalTo(listOf(client0, client1)))

        clients.delete(client0)

        assertThat(clients.findAll().toList(), equalTo(listOf(client1)))

        clients.delete(client1)

        assertThat(clients.findAll().toList(), equalTo(emptyList()))
    }

}