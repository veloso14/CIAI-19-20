package pt.unl.fct.di.iadi.vetclinic.AppointmentTests

import org.hamcrest.CoreMatchers.equalTo
import org.hamcrest.CoreMatchers.not
import org.junit.Assert.assertThat
import org.junit.Test
import org.junit.runner.RunWith
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.boot.test.context.SpringBootTest
import org.springframework.test.context.junit4.SpringRunner
import pt.unl.fct.di.iadi.vetclinic.model.*
import java.time.LocalDateTime

@RunWith(SpringRunner::class)
@SpringBootTest
class AppointmentRepoTester {

    @Autowired
    lateinit var apts: AppointmentRepository

    companion object Constants {
        val consulta = AppointmentDAO(-1L, LocalDateTime.MIN, LocalDateTime.MAX, "consulta",false, PetDAO(), ClientDAO(), VetDAO())
        val exame = AppointmentDAO(-1L, LocalDateTime.MIN, LocalDateTime.MAX, "exame",false, PetDAO(), ClientDAO(), VetDAO())
    }

    // IMPORTANT: the database is not cleaned between tests, it means that it will keep the pets
    // saved in previous tests

    @Test
    fun `basic test on findAll`() {
        assertThat(apts.findAll().toList(), equalTo(emptyList()))
    }

    @Test
    fun `basic test on save and delete`() {
        val apt = apts.save(consulta)
        assertThat(apt.id, not(equalTo(consulta.id)))//the id is different because it is generated by Spring
        assertThat(apt.start, equalTo(consulta.start))
        assertThat(apt.end, equalTo(consulta.end))
        assertThat(apt.desc, equalTo(consulta.desc))
        assertThat(apt.complete, equalTo(consulta.complete))


        assertThat(apts.findAll().toList(), equalTo(listOf<AppointmentDAO>(apt)))

        apts.delete(apt);

        assertThat(apts.findAll().toList(), equalTo(emptyList()))
    }

    @Test
    fun `another test on save and delete`() {
        val apt0 = apts.save(consulta)
        assertThat(apt0.id, not(equalTo(consulta.id)))//the id is different because it is generated by Spring
        assertThat(apt0.start, equalTo(consulta.start))
        assertThat(apt0.end, equalTo(consulta.end))
        assertThat(apt0.desc, equalTo(consulta.desc))
        assertThat(apt0.complete, equalTo(consulta.complete))

        assertThat(apts.findAll().toList(), equalTo(listOf(apt0)))

        val apt1 = apts.save(exame)
        assertThat(apt1.id, not(equalTo(exame.id)))//the id is different because it is generated by Spring
        assertThat(apt1.start, equalTo(exame.start))
        assertThat(apt1.end, equalTo(exame.end))
        assertThat(apt1.desc, equalTo(exame.desc))
        assertThat(apt1.complete, equalTo(exame.complete))

        assertThat(apts.findAll().toList(), equalTo(listOf(apt0, apt1)))

        apts.delete(apt0)

        assertThat(apts.findAll().toList(), equalTo(listOf(apt1)))

        apts.delete(apt1)

        assertThat(apts.findAll().toList(), equalTo(emptyList()))
    }

}